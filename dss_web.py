import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from prophet import Prophet
from pulp import *
from sklearn.metrics import mean_absolute_error, mean_squared_error
import numpy as np

st.set_page_config(page_title="DSS ƒê·ªì U·ªëng", page_icon="ü•§", layout="wide")
st.markdown("""
    <style>
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    </style>
    """, unsafe_allow_html=True)

st.sidebar.title("T√πy ch·ªçn d·ªØ li·ªáu")
uploaded_file = st.sidebar.file_uploader("Ch·ªçn file d·ªØ li·ªáu CSV", type="csv")

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    df['Purchase Date'] = pd.to_datetime(df['Purchase Date'])
    df = df.sort_values('Purchase Date')
    df['Month'] = df['Purchase Date'].dt.to_period('M').dt.to_timestamp()

    st.title("ü•§ DSS d·ª± b√°o & t·ªëi ∆∞u h√≥a s·∫£n ph·∫©m ƒë·ªì u·ªëng")
    col1, col2 = st.columns(2)
    with col1:
        st.markdown("### üìä Th·ªëng k√™ m√¥ t·∫£")
        stats = df.groupby('Product').agg({
            'Units Sold': ['count', 'mean', 'std', 'min', 'max'],
            'Profit': ['mean', 'sum']
        }).round(2)
        st.dataframe(stats)
    with col2:
        st.markdown("### üìà Bi·ªÉu ƒë·ªì doanh s·ªë")
        fig, ax = plt.subplots(figsize=(5,4))
        for p in df['Product'].unique():
            sub = df[df['Product']==p]
            ax.plot(sub['Month'], sub['Units Sold'], label=p)
        ax.legend()
        ax.set_title("Doanh s·ªë theo th·ªùi gian")
        st.pyplot(fig)

    st.markdown("---")
    st.markdown("## üîÆ D·ª± b√°o doanh s·ªë")
    products = st.sidebar.multiselect("Ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ d·ª± b√°o", df['Product'].unique(), default=['Cola', 'Beer', 'Green Tea'])
    periods = st.sidebar.slider("S·ªë th√°ng d·ª± b√°o", 1, 12, 6)
    demands = {}
    for product in products:
        with st.expander(f"D·ª± b√°o cho {product}"):
            sub = df[df['Product']==product][['Month','Units Sold']].rename(
                columns={'Month':'ds','Units Sold':'y'})
            model = Prophet(yearly_seasonality=True, weekly_seasonality=False, daily_seasonality=False)
            model.fit(sub)
            future = model.make_future_dataframe(periods=periods, freq='M')
            forecast = model.predict(future)
            y_true = sub['y'].values[-periods:]
            y_pred = forecast['yhat'].values[-2*periods:-periods]
            mae = mean_absolute_error(y_true, y_pred) if len(y_true)==len(y_pred) else None
            rmse = np.sqrt(mean_squared_error(y_true, y_pred)) if len(y_true)==len(y_pred) else None
            st.write(f"MAE: {mae:.2f}" if mae else "Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh MAE")
            st.write(f"RMSE: {rmse:.2f}" if rmse else "Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh RMSE")
            st.dataframe(forecast[['ds','yhat', 'yhat_lower', 'yhat_upper']].tail(periods))
            fig2 = model.plot(forecast)
            st.pyplot(fig2)
            demands[product] = int(forecast['yhat'].values[-1])

    st.markdown("---")
    st.markdown("## ‚öôÔ∏è T·ªëi ∆∞u h√≥a s·∫£n xu·∫•t")
    profits = {'Cola': 12, 'Beer': 15, 'Green Tea': 10}
    resources = {
        'Water': {'Cola': 0.8, 'Beer': 0.85, 'Green Tea': 0.9},
        'Sugar': {'Cola': 0.15, 'Beer': 0.05, 'Green Tea': 0.1}
    }
    resource_limits = {
        'Water': st.sidebar.number_input("Gi·ªõi h·∫°n n∆∞·ªõc (l√≠t)", value=1500),
        'Sugar': st.sidebar.number_input("Gi·ªõi h·∫°n ƒë∆∞·ªùng (kg)", value=200)
    }

    if st.button("T√≠nh t·ªëi ∆∞u"):
        model = LpProblem("soft-drink-optimization", LpMaximize)
        vars = {p: LpVariable(p, lowBound=0, upBound=demands.get(p,0), cat="Integer") for p in products}
        model += lpSum(profits.get(p,0) * vars[p] for p in vars)
        model += lpSum(vars[p] for p in vars) <= 2000
        for resource, limit in resource_limits.items():
            model += lpSum(resources[resource][p] * vars[p] for p in vars) <= limit
        model.solve()
        st.subheader("K·∫ø ho·∫°ch s·∫£n xu·∫•t t·ªëi ∆∞u")
        for p in vars:
            st.write(f"{p}: {int(vars[p].value())} (chai)")
        st.write(f"L·ª£i nhu·∫≠n t·ªëi ƒëa = {model.objective.value():,.0f} (VND)")
else:
    st.info("Vui l√≤ng t·∫£i l√™n file d·ªØ li·ªáu CSV ƒë·ªÉ b·∫Øt ƒë·∫ßu.")