import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from prophet import Prophet
from pulp import *
from sklearn.metrics import mean_absolute_error, mean_squared_error
import numpy as np
from dss_style import set_custom_style
import plotly.express as px

set_custom_style()

st.set_page_config(page_title="DSS ƒê·ªì U·ªëng", page_icon="ü•§", layout="wide")
st.markdown("""
    <style>
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    </style>
    """, unsafe_allow_html=True)

st.sidebar.title("T√πy ch·ªçn d·ªØ li·ªáu")
uploaded_file = st.sidebar.file_uploader("Ch·ªçn file d·ªØ li·ªáu CSV", type="csv")

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    df['Purchase Date'] = pd.to_datetime(df['Purchase Date'])
    df = df.sort_values('Purchase Date')
    df['Month'] = df['Purchase Date'].dt.to_period('M').dt.to_timestamp()

    st.title("ü•§ DSS d·ª± b√°o & t·ªëi ∆∞u h√≥a s·∫£n ph·∫©m ƒë·ªì u·ªëng")

    # --- B·ªô l·ªçc s·∫£n ph·∫©m v√† th·ªùi gian ---
    product_options = df['Product'].unique()
    selected_products = st.sidebar.multiselect("Ch·ªçn s·∫£n ph·∫©m", product_options, default=list(product_options))
    min_date = df['Purchase Date'].min()
    max_date = df['Purchase Date'].max()
    selected_date = st.sidebar.date_input("Ch·ªçn kho·∫£ng th·ªùi gian", [min_date, max_date])

    # L·ªçc d·ªØ li·ªáu theo s·∫£n ph·∫©m v√† th·ªùi gian
    filtered_df = df[
        (df['Product'].isin(selected_products)) &
        (df['Purchase Date'] >= pd.to_datetime(selected_date[0])) &
        (df['Purchase Date'] <= pd.to_datetime(selected_date[1]))
    ]

    col1, col2 = st.columns(2)
    with col1:
        st.markdown("### üìä Th·ªëng k√™ m√¥ t·∫£")
        stats = filtered_df.groupby('Product').agg({
            'Units Sold': ['count', 'mean', 'std', 'min', 'max'],
            'Profit': ['mean', 'sum']
        }).round(2)
        st.dataframe(stats)
    with col2:
        st.markdown("### üìà Bi·ªÉu ƒë·ªì doanh s·ªë (Line chart)")
        if not filtered_df.empty:
            # T·ªïng h·ª£p s·ªë l∆∞·ª£ng b√°n theo th√°ng v√† s·∫£n ph·∫©m
            plot_df = (
                filtered_df.groupby(['Month', 'Product'], as_index=False)['Units Sold'].sum()
            )

            fig = px.line(
                plot_df,
                x="Month",
                y="Units Sold",
                color="Product",
                markers=True,
                labels={
                    "Month": "Th·ªùi gian (th√°ng)",
                    "Units Sold": "S·ªë l∆∞·ª£ng b√°n",
                    "Product": "S·∫£n ph·∫©m"
                },
                title="Doanh s·ªë b√°n theo th·ªùi gian"
            )
            fig.update_layout(
                legend_title_text='S·∫£n ph·∫©m',
                xaxis_title="Th·ªùi gian (th√°ng)",
                yaxis_title="S·ªë l∆∞·ª£ng b√°n",
                hovermode="x unified",
                template="plotly_white"
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì.")

    st.markdown("---")
    st.markdown("## üîÆ D·ª± b√°o doanh s·ªë")
    products = st.sidebar.multiselect(
        "Ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ d·ª± b√°o",
        df['Product'].unique(),
        default=['Cola', 'Beer', 'Green Tea']
    )

    # Cho ph√©p ch·ªçn s·ªë th√°ng d·ª± b√°o d√†i h∆°n (t·ªëi ƒëa 36 th√°ng)
    periods = st.sidebar.slider("S·ªë th√°ng d·ª± b√°o", 1, 36, 12)

    demands = {}
    for product in products:
        with st.expander(f"D·ª± b√°o cho {product}"):
            # T·ªïng h·ª£p s·ªë l∆∞·ª£ng b√°n theo th√°ng cho s·∫£n ph·∫©m
            sub = (
                df[df['Product'] == product]
                .groupby('Month', as_index=False)['Units Sold'].sum()
                .rename(columns={'Month': 'ds', 'Units Sold': 'y'})
            )
            if len(sub) > 1:
                model = Prophet(
                    yearly_seasonality=True,
                    weekly_seasonality=False,
                    daily_seasonality=False
                )
                model.fit(sub)

                # T·∫°o future dataframe k√©o d√†i th√™m `periods` th√°ng
                future = model.make_future_dataframe(periods=periods, freq='M')
                forecast = model.predict(future)

                # ƒê√°nh gi√° sai s·ªë n·∫øu ƒë·ªß d·ªØ li·ªáu l·ªãch s·ª≠
                if len(sub) > periods:
                    y_true = sub['y'].values[-periods:]
                    y_pred = forecast['yhat'].values[-2*periods:-periods]
                    mae = mean_absolute_error(y_true, y_pred)
                    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
                    st.write(f"MAE: {mae:.2f}")
                    st.write(f"RMSE: {rmse:.2f}")
                else:
                    st.info("Kh√¥ng ƒë·ªß d·ªØ li·ªáu l·ªãch s·ª≠ ƒë·ªÉ t√≠nh MAE/RMSE")

                # Hi·ªÉn th·ªã b·∫£ng d·ª± b√°o c√°c th√°ng cu·ªëi
                st.dataframe(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(periods))

                # V·∫Ω bi·ªÉu ƒë·ªì d·ª± b√°o
                fig2 = model.plot(forecast)
                st.pyplot(fig2)

                # L·∫•y d·ª± b√°o th√°ng cu·ªëi ƒë·ªÉ ƒë∆∞a v√†o b√†i to√°n t·ªëi ∆∞u  
                demands[product] = int(forecast['yhat'].values[-1])
            else:
                st.warning("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ d·ª± b√°o cho s·∫£n ph·∫©m n√†y.")

    st.markdown("---")
    st.markdown("## ‚öôÔ∏è T·ªëi ∆∞u h√≥a s·∫£n xu·∫•t")

    # Ch·ªçn ti√™u ch√≠ t·ªëi ∆∞u h√≥a
    opt_criteria = st.sidebar.selectbox(
        "Ch·ªçn ti√™u ch√≠ t·ªëi ∆∞u h√≥a",
        [
            "T·ªëi ƒëa h√≥a l·ª£i nhu·∫≠n",
            "T·ªëi ƒëa h√≥a t·ªïng s·ªë l∆∞·ª£ng s·∫£n xu·∫•t",
            "T·ªëi thi·ªÉu h√≥a chi ph√≠ nguy√™n li·ªáu",
            "C√¢n b·∫±ng s·∫£n l∆∞·ª£ng c√°c s·∫£n ph·∫©m"
        ]
    )

    profits = {'Cola': 12, 'Beer': 15, 'Green Tea': 10}
    costs = {'Cola': 5, 'Beer': 6, 'Green Tea': 4}  # v√≠ d·ª• chi ph√≠ s·∫£n xu·∫•t/ƒë∆°n v·ªã
    resources = {
        'Water': {'Cola': 0.8, 'Beer': 0.85, 'Green Tea': 0.9},
        'Sugar': {'Cola': 0.15, 'Beer': 0.05, 'Green Tea': 0.1}
    }
    resource_limits = {
        'Water': st.sidebar.number_input("Gi·ªõi h·∫°n n∆∞·ªõc (l√≠t)", value=1500),
        'Sugar': st.sidebar.number_input("Gi·ªõi h·∫°n ƒë∆∞·ªùng (kg)", value=200)
    }
    max_total = st.sidebar.number_input("C√¥ng su·∫•t t·ªëi ƒëa (chai)", value=2000)

    if st.button("T√≠nh t·ªëi ∆∞u"):
        model = LpProblem(
            "soft-drink-optimization",
            LpMaximize if opt_criteria != "T·ªëi thi·ªÉu h√≥a chi ph√≠ nguy√™n li·ªáu" else LpMinimize
        )
        vars = {p: LpVariable(p, lowBound=0, upBound=demands.get(p, 0), cat="Integer") for p in products}

        # H√†m m·ª•c ti√™u theo l·ª±a ch·ªçn
        if opt_criteria == "T·ªëi ƒëa h√≥a l·ª£i nhu·∫≠n":
            model += lpSum(profits.get(p, 0) * vars[p] for p in vars)
            # R√†ng bu·ªôc: c√¥ng su·∫•t + nguy√™n li·ªáu
            model += lpSum(vars[p] for p in vars) <= max_total
            for resource, limit in resource_limits.items():
                model += lpSum(resources[resource][p] * vars[p] for p in vars) <= limit

        elif opt_criteria == "T·ªëi ƒëa h√≥a t·ªïng s·ªë l∆∞·ª£ng s·∫£n xu·∫•t":
            model += lpSum(vars[p] for p in vars)
            # R√†ng bu·ªôc: ch·ªâ c√¥ng su·∫•t, kh√¥ng r√†ng bu·ªôc nguy√™n li·ªáu
            model += lpSum(vars[p] for p in vars) <= max_total

        elif opt_criteria == "T·ªëi thi·ªÉu h√≥a chi ph√≠ nguy√™n li·ªáu":
            model += lpSum(costs.get(p, 0) * vars[p] for p in vars)
            # R√†ng bu·ªôc: nguy√™n li·ªáu + nhu c·∫ßu d·ª± b√°o
            for resource, limit in resource_limits.items():
                model += lpSum(resources[resource][p] * vars[p] for p in vars) <= limit

        elif opt_criteria == "C√¢n b·∫±ng s·∫£n l∆∞·ª£ng c√°c s·∫£n ph·∫©m":
            max_var = LpVariable("max_var", lowBound=0)
            for p in vars:
                model += vars[p] <= max_var
            model += max_var
            # R√†ng bu·ªôc: c√¥ng su·∫•t + nguy√™n li·ªáu
            model += lpSum(vars[p] for p in vars) <= max_total
            for resource, limit in resource_limits.items():
                model += lpSum(resources[resource][p] * vars[p] for p in vars) <= limit

        model.solve()
        st.subheader("K·∫ø ho·∫°ch s·∫£n xu·∫•t t·ªëi ∆∞u")
        for p in vars:
            st.write(f"{p}: {int(vars[p].value())} (chai)")
        if opt_criteria == "T·ªëi ƒëa h√≥a l·ª£i nhu·∫≠n":
            st.write(f"L·ª£i nhu·∫≠n t·ªëi ƒëa = ${model.objective.value():,.0f}")
        elif opt_criteria == "T·ªëi ƒëa h√≥a t·ªïng s·ªë l∆∞·ª£ng s·∫£n xu·∫•t":
            st.write(f"T·ªïng s·ªë l∆∞·ª£ng s·∫£n xu·∫•t t·ªëi ƒëa = {model.objective.value():,.0f} (chai)")
        elif opt_criteria == "T·ªëi thi·ªÉu h√≥a chi ph√≠ nguy√™n li·ªáu":
            st.write(f"Chi ph√≠ nguy√™n li·ªáu t·ªëi thi·ªÉu = ${model.objective.value():,.0f}")
        elif opt_criteria == "C√¢n b·∫±ng s·∫£n l∆∞·ª£ng c√°c s·∫£n ph·∫©m":
            st.write(f"S·∫£n l∆∞·ª£ng t·ªëi ƒëa c·ªßa 1 s·∫£n ph·∫©m = {model.objective.value():,.0f} (chai)")
else:
    st.info("Vui l√≤ng t·∫£i l√™n file d·ªØ li·ªáu CSV ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
